hi# products/admin.py
from django.contrib import admin
from .models import (
    ProductCategory, Type, Model, Unit,
    StandardProduct, CustomProduct, ModularProduct,
    Part, PartHardware,
    Module, ModulePart,
    Constraint, ModularProductModule, ModularProductMaterialOverride,
    Coupon, Review, StandardProductImage, GlobalSetting
)
from django.utils.html import mark_safe, format_html # Import format_html for custom display methods
from decimal import Decimal # Import Decimal for financial calculations
import logging
import traceback # For detailed error logging

# Get an instance of a logger for this module
logger = logging.getLogger(__name__)

# --- Inlines for related models ---

class StandardProductImageInline(admin.TabularInline):
    model = StandardProductImage
    extra = 1 # Number of empty forms to display

class PartHardwareInline(admin.TabularInline):
    model = PartHardware
    extra = 1

# class ModulePartInline(admin.TabularInline):
#     model = ModulePart
#     extra = 1
    # Add fields or raw_id_fields if ModulePart has many fields or FKs to large tables
    # fields = ('part', 'quantity', 'x_pos', 'y_pos', 'z_pos', 'length', 'width', 'thickness', 'material')
    # raw_id_fields = ('part', 'material') # Assuming ModulePart has a 'material' FK

class PartInline(admin.TabularInline):
    model = Part
    extra = 1
    fields = ('name', 'description', 'part_length_formula', 'part_width_formula', 'material')
    show_change_link = True

class ConstraintInline(admin.TabularInline):
    model = Constraint
    extra = 1
    fields = ('abbreviation', 'value')

class ModularProductModuleInline(admin.TabularInline):
    model = ModularProductModule
    extra = 1
    fields = ('module', 'quantity', 'position_x', 'position_y', 'position_z',
              'orientation_roll', 'orientation_pitch', 'orientation_yaw')

class ModularProductMaterialOverrideInline(admin.TabularInline):
    model = ModularProductMaterialOverride
    extra = 1
    fields = ('wooden_material', 'override_purchase_price_sft', 'override_selling_price_sft', 'is_preferred', 'notes')

class ReviewInline(admin.TabularInline):
    model = Review
    extra = 0 # Don't show empty forms by default
    readonly_fields = ('user', 'rating', 'comment', 'created_at') # Reviews usually added by users, not admin directly


# --- Admin for Base/Non-Polymorphic Models ---

@admin.register(ProductCategory)
class ProductCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'image_tag')
    search_fields = ('name',)
    def image_tag(self, obj):
        if obj.image and hasattr(obj.image, 'url'):
            return mark_safe(f'<img src="{obj.image.url}" style="max-width: 100px; max-height: 100px;" />')
        return "No Image"
    image_tag.short_description = 'Image' # This sets the column header in the admin

@admin.register(Type)
class TypeAdmin(admin.ModelAdmin):
    list_display = ('name', 'category', 'image_tag')
    list_filter = ('category',)
    search_fields = ('name', 'category__name')
    def image_tag(self, obj):
        if obj.image and hasattr(obj.image, 'url'):
            return mark_safe(f'<img src="{obj.image.url}" style="max-width: 100px; max-height: 100px;" />')
        return ""
    image_tag.short_description = 'Image'

@admin.register(Model)
class ModelAdmin(admin.ModelAdmin):
    list_display = ('name', 'type', 'image_tag')
    list_filter = ('type__category', 'type')
    search_fields = ('name', 'type__name', 'type__category__name')
    def image_tag(self, obj):
        if obj.image and hasattr(obj.image, 'url'):
            return mark_safe(f'<img src="{obj.image.url}" style="max-width: 100px; max-height: 100px;" />')
        return ""
    image_tag.short_description = 'Image' # This sets the column header in the admin list
    # The __str__ method is on the model, not the admin class, so this is redundant here.
    # def __str__(self):
    #     return self.name

@admin.register(Unit)
class UnitAdmin(admin.ModelAdmin):
    list_display = ('code', 'name')
    search_fields = ('code', 'name')

@admin.register(Coupon)
class CouponAdmin(admin.ModelAdmin):
    list_display = ('code', 'discount_percentage', 'valid_from', 'valid_until', 'is_active')
    list_filter = ('is_active',)
    search_fields = ('code',)
    date_hierarchy = 'valid_from'


# --- Admin for Polymorphic Product Subclasses ---

@admin.register(StandardProduct)
class StandardProductAdmin(admin.ModelAdmin):
    base_model = StandardProduct
    list_display = ('name', 'category', 'type', 'model', 'brand', 'section',
                    'material_description', 'length_mm', 'width_mm', 'height_mm',
                    's_price', 'p_price')
    list_filter = ('category', 'type', 'model', 'brand', 'section')
    search_fields = ('name', 'material_description')
    inlines = [StandardProductImageInline, ReviewInline]
    fieldsets = (
        (None, {
            'fields': ('name', 'category', 'type', 'model', 'brand', 'image')
        }),
        ('Standard Product Details', {
            'fields': ('section', 'material_description', 'color',
                       'length_mm', 'width_mm', 'height_mm',
                       's_price', 'p_price', 'price_unit')
        }),
        ('SEO Information', {
            'fields': ('slug', 'meta_title', 'meta_description', 'keywords'),
            'classes': ('collapse',)
        }),
    )
    readonly_fields = ('sl_price',) # sl_price is calculated

@admin.register(CustomProduct)
class CustomProductAdmin(admin.ModelAdmin):
    base_model = CustomProduct
    list_display = ('name', 'category', 'type', 'model', 'brand',
                    'manual_purchase_cost', 'manual_selling_price')
    list_filter = ('category', 'type', 'model', 'brand')
    search_fields = ('name', 'design_notes')
    inlines = [ReviewInline]
    fieldsets = (
        (None, {
            'fields': ('name', 'product_type', 'category', 'type', 'model', 'brand', 'image')
        }),
        ('Custom Product Details', {
            'fields': ('manual_purchase_cost', 'manual_selling_price', 'design_notes')
        }),
        ('SEO Information', {
            'fields': ('slug', 'meta_title', 'meta_description', 'keywords'),
            'classes': ('collapse',)
        }),
    )

@admin.register(ModularProduct)
class ModularProductAdmin(admin.ModelAdmin):
    base_model = ModularProduct
    list_display = ('name', 'category', 'type', 'model', 'brand', 'price',
                    'formatted_break_even_status', 'formatted_profit_margin')
    list_filter = ('category', 'type', 'model', 'brand')
    search_fields = ('name', 'description')
    inlines = [ConstraintInline, ModularProductModuleInline, ModularProductMaterialOverrideInline, ReviewInline]
    fieldsets = (
        (None, {
            'fields': ('name',  'category', 'type', 'model', 'brand', 'image')
        }),
        ('Modular Product Details', {
            'fields': ('description', 'length_mm_min', 'length_mm_max',
                       'width_mm_min', 'width_mm_max', 'height_mm_min',
                       'height_mm_max', 'price', # manual price
                       'threed_model_assembly_file', 'threed_config_json')
        }),
        ('Calculated Costs (Read-only)', {
            'fields': ('calculate_total_modular_product_purchase_cost',
                        'calculate_total_modular_product_selling_cost_derived',
                        'formatted_break_even_status', 'formatted_profit_margin'),
            'classes': ('collapse',),
        }),
        ('SEO Information', {
            'fields': ('slug', 'meta_title', 'meta_description', 'keywords'),
            'classes': ('collapse',)
        }),
    )
    readonly_fields = ('calculate_total_modular_product_purchase_cost',
                       'calculate_total_modular_product_selling_cost_derived',
                       'formatted_break_even_status', 'formatted_profit_margin')


# --- Admin for Part and Module Blueprints ---

@admin.register(Part)
class PartAdmin(admin.ModelAdmin):
    list_display = ('name', 'module','material', 'wastage_factor', 'part_length_formula', 'part_width_formula', 'part_quantity_formula')
    list_filter = ('material', 'shape_type')
    search_fields = ('name', 'description', 'part_length_formula', 'part_width_formula')
    inlines = [PartHardwareInline]
    fieldsets = (
        (None, {
            'fields': ('name', 'description', 'material', 'wastage_factor', 'threed_model_file')
        }),
        ('Dimensions & Quantity Formulas', {
            'fields': ('part_length_formula', 'part_width_formula', 'part_thickness_mm', 'part_quantity_formula')
        }),
        ('Edge Banding', {
            'fields': ('top_edge_band', 'left_edge_band', 'bottom_edge_band', 'right_edge_band')
        }),
        ('Labor Costs per Meter', {
            'fields': ('cutting_cost_per_meter', 'grooving_cost_per_meter', 'edgeband_cutting_cost_per_meter')
        }),
        ('Geometry (for specific shapes)', {
            'fields': ('shape_type', 'geometry_features', 'orientation')
        })
    )

class ModulePartAdmin(admin.ModelAdmin):
    inlines = [PartInline]
    list_display = ['module','quantity']

admin.site.register(ModulePart, ModulePartAdmin)

@admin.register(Module)
class ModuleAdmin(admin.ModelAdmin):
    # Fields to display in the list view (table view)
    list_display = (
        'name',
        'length_mm',
        'width_mm',
        'height_mm',
        'calculate_module_total_purchase_cost',  # Display summarized costs in list view
        'calculate_module_total_selling_cost',
        'created_at',
        'updated_at',
    )
    search_fields = ('name', 'description')
    list_filter = ('created_at', 'updated_at') # Add filters for date fields
    date_hierarchy = 'created_at' # Add a date drill-down navigation

    # Inlines for related objects (e.g., ModuleParts)
    #inlines = [PartInline]

    # Fieldsets for organizing fields in the add/change form
    fieldsets = (
        (None, {
            'fields': ('name', 'description', 'image', 'threed_model_file')
        }),
        ('Module Dimensions', { # Renamed to be more direct
            'fields': ('length_mm', 'width_mm', 'height_mm'),
            'description': 'Main dimensions of the module in millimeters.'
        }),
        # --- Calculated Costs ---
        ('Summarized Costs (Read-only)', {
            'fields': ('calculate_module_total_purchase_cost', 'calculate_module_total_selling_cost'),
            'classes': ('collapse',), # Optional: make this section collapsable
            'description': 'Quick overview of total calculated purchase and selling costs.'
        }),
        ('Detailed Cost Analysis (Read-only)', { # New fieldset for the full breakdown
            'fields': ('display_module_full_cost_analysis',), # This is the custom method
            'classes': ('collapse',), # Optional: make it collapsable
            'description': 'Comprehensive cost breakdown including sheet optimization, wastage, and base blueprint costs.'
        }),
        # --- Automatic Timestamps ---
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',),
        }),
    )

    # All fields listed here will be read-only in the admin form
    readonly_fields = (
        'calculate_module_total_purchase_cost',
        'calculate_module_total_selling_cost',
        'display_module_full_cost_analysis', # Your custom detailed display method
        'created_at', # These are typically auto-populated
        'updated_at', # These are typically auto-populated
    )

    # --- Methods for Admin Display ---

    # Method to display formatted full cost breakdown in the admin change form
    def display_module_full_cost_analysis(self, obj):
        """
        Calls the model's get_module_cost_comparison_with_sheets method
        and formats its comprehensive output as readable HTML for the admin.
        """
        if not obj.pk: # For unsaved objects (e.g., "Add Module" page)
            return format_html("<p>Save the module first to view detailed cost analysis.</p>")

        try:
            cost_data = obj.get_module_cost_comparison_with_sheets()

            if not cost_data:
                return format_html("<p>No cost analysis data available. Ensure module has parts and materials defined.</p>")

            html_output = "<h3>Summary Totals:</h3>"
            html_output += f"<p><strong>Base Purchase Cost (Blueprint):</strong> {cost_data.get('module_cost_blueprint_base_total', Decimal('0.00')).quantize(Decimal('0.01'))}</p>"
            html_output += f"<p><strong>Base Selling Cost (Blueprint):</strong> {cost_data.get('module_sell_blueprint_base_total', Decimal('0.00')).quantize(Decimal('0.01'))}</p>"
            html_output += f"<p><strong>Total Purchase Wastage (from sheets):</strong> {cost_data.get('total_purchase_wastage', Decimal('0.00')).quantize(Decimal('0.01'))}</p>"
            html_output += f"<p><strong>Total Selling Wastage (from sheets):</strong> {cost_data.get('total_selling_wastage', Decimal('0.00')).quantize(Decimal('0.01'))}</p>"
            html_output += f"<p><strong>Blade Size Used:</strong> {cost_data.get('blade_size_used_mm', 'N/A')} mm</p>"

            html_output += "<h3>Sheet Packing & Cutting Breakdown:</h3>"
            comparison_breakdown = cost_data.get('comparison_breakdown_data', {})
            html_output += f"<p><strong>Total Cost from Sheets (excluding wastage):</strong> {comparison_breakdown.get('total_cost_from_sheets', Decimal('0.00')).quantize(Decimal('0.01'))}</p>"

            html_output += "<h5>Details by Material:</h5><ul>"
            details_by_material = comparison_breakdown.get('details_by_material', {})
            if details_by_material:
                for material_name, details in details_by_material.items():
                    html_output += f"<li><strong>{material_name}</strong>: "
                    html_output += f"Sheets Used: {details.get('sheets_used', 0)}, "
                    html_output += f"Cost of Sheets Used: {details.get('cost_of_sheets_used', Decimal('0.00')).quantize(Decimal('0.01'))}, "
                    html_output += f"Cutting Cost: {details.get('cutting_cost', Decimal('0.00')).quantize(Decimal('0.01'))}, "
                    html_output += f"Wastage Cost (for info only): {details.get('wastage_cost_info_only', Decimal('0.00')).quantize(Decimal('0.01'))}, "
                    html_output += f"Total Cost for Material (no wastage): {details.get('total_cost_for_material', Decimal('0.00')).quantize(Decimal('0.01'))}"
                    html_output += "</li>"
            else:
                html_output += "<li>No material breakdown available for packing analysis.</li>"
            html_output += "</ul>"

            # Optionally, also display the detailed blueprint breakdown
            blueprint_breakdown = obj.get_module_detailed_cost_breakdown()

            html_output += "<h3>Blueprint Base Cost Breakdown (Pre-Wastage):</h3>"
            html_output += "<h5>Purchase Breakdown:</h5><ul>"
            if blueprint_breakdown.get('purchase_breakdown'):
                for k, v in blueprint_breakdown['purchase_breakdown'].items():
                    # Ensure v is Decimal before quantizing
                    if isinstance(v, Decimal):
                        html_output += f"<li><strong>{k.replace('_', ' ').title()}:</strong> {v.quantize(Decimal('0.01'))}</li>"
                    else:
                        html_output += f"<li><strong>{k.replace('_', ' ').title()}:</strong> {v}</li>"
            else:
                html_output += "<li>No blueprint purchase breakdown available.</li>"
            html_output += "</ul>"

            html_output += "<h5>Selling Breakdown:</h5><ul>"
            if blueprint_breakdown.get('selling_breakdown'):
                for k, v in blueprint_breakdown['selling_breakdown'].items():
                    # Ensure v is Decimal before quantizing
                    if isinstance(v, Decimal):
                        html_output += f"<li><strong>{k.replace('_', ' ').title()}:</strong> {v.quantize(Decimal('0.01'))}</li>"
                    else:
                        html_output += f"<li><strong>{k.replace('_', ' ').title()}:</strong> {v}</li>"
            else:
                html_output += "<li>No blueprint selling breakdown available.</li>"
            html_output += "</ul>"

            # Add the 'note' from your get_module_cost_comparison_with_sheets if present
            note = cost_data.get('note')
            if note:
                html_output += f"<p><em>Note: {note}</em></p>"

            return format_html(html_output)

        except Exception as e:
            logger.error(f"Error displaying full cost analysis for Module '{obj.name}' (ID: {obj.pk}): {e}", exc_info=True)
            return format_html(f"<p style='color: red;'>Error calculating and displaying detailed costs. Please check server logs.<br>Error: {e}</p>")

    display_module_full_cost_analysis.short_description = "Full Cost Breakdown" # Label for the field in admin

@admin.register(GlobalSetting)
class GlobalSettingAdmin(admin.ModelAdmin):
    list_display = ('name', 'decimal_value', 'string_value', 'boolean_value')
    search_fields = ('name',)
    # You might want to customize this further, e.g., if you only want to show
    # the relevant value type based on the setting name.